Route: "/api/register/" method=POST
Takes in a json with "email", "password", "first", "last", and "phone_number"
fields and creates and returns a new User.

Route: "/api/login/" method=POST
Takes in a json with "email" and "password" fields and logs a user in
if the information is correct. Returns user information

Route: "/api/session/" method=POST
Takes in a request with a users update token in the header and updates session
Returns the session token, session expiration, and update token

Route: "/api/secret/" method=GET
Takes in a session token in the header and authenticates 
by returning a secret message

Route: "/api/logout/" method=POST
Takes in a session token in the header and logs the user out if
the session token is valid. Returns a success or failure message

Route: "/api/user/" method=GET
Returns a json containing a list of all users in the database
and the info that corresponds to the users

Route: "/api/user/<int:user_id>/" method=POST
Takes in a json with fields "first", "last", "email", and "phone_number"
and updates the user with given user_id with these fields. Returns the user info

Route: "/api/user/<int:user_id>/" method=GET
Returns user info for the user specified by user_id

Route: "/api/user/<int:user_id>/" method=DELETE
Deletes and returns the user specified by user_id

Route: "/api/asset/" method=GET
Returns a json containing a list of all assets and their information

Route: "/api/user/<int:user_id>/upload/" method=POST
Takes in an "image_data" field containing the base64 encoding
for an image that a user wants to upload to their profile
Returns information about the image

Route: "/api/asset/<int:asset_id>/" method=GET
Returns image info corresponding to the asset_id

Route: "/api/job/filter/" method=GET
Takes in a "search" field and returns a json containing a list of
jobs that are similar to the "search" field

Route: "/api/job/" method=GET
Returns a json containing a list of all jobs and info about the jobs

Route: "/api/user/<int:user_id>/job/"
Takes in "title", "description", "location", "date_activity", "duration",
"reward", "category", "longtitude", and "latitude" and creates a job with this info
Returns the newly created job

Route: "/api/user/<int:user_id>/job/<int:job_id>/" method=POST
Adds the user corresponding to user_id to a list of potential candidates for
the job corresponding to job_id.
Returns the user and info about user

Route: "/api/job/<int:job_id>/user/<int:user_id>/" method=POST
Takes in job_id, user_id and updates the job with the user as the reciever
Returns the serialize form of the job

Route: "/api/job/<int:job_id>/done/" method=POST
Takes in job_id and updates the job as completed
Returns the serialize form of the job

Route: "/api/job/<int:job_id>/" method=POST
Takes in job_id and a json with all the job information and updates a job
Returns the serialize form of the job

Route: "/api/job/<int:job_id>/" method=GET
Takes in job_id and returns that job
Returns the serialize form of the job

Route: "/api/job/<int:job_id>/" method=DELETE
Takes in job_id and deletes job
Returns the serialize form of the deleted job

Route: "/api/rating/" method=GET
Returns the serialize form of all rating as a list

Route: "/api/user/<int:user_id>/rating/<int:user2_id>/" method=POST
Takes in rating_id, user_id and a json with all the rating information and creates a rating
Returns the serialize form of the rating

Route: "/api/user/<int:user_id>/rating/<int:rating_id>/" method=POST
Takes in rating_id, user_id and a json with all the rating information and updates a rating
Returns the serialize form of the rating

Route: "/api/rating/<int:rating_id>/" method=GET
Takes in rating_id and returns that rating
Returns the serialize form of the rating

Route: "/api/rating/<int:rating_id>/" method=DELETE
Takes in rating_id and deletes rating
Returns the serialize form of the deleted rating

Route: "/api/chat/<int:chat_id>/" method=GET
Takes in chat_id and returns that chat
Returns the serialize form of the chat

Route: "/api/chat/<int:chat_id>/" method=DELETE
Takes in chat_id and deletes chat
Returns the serialize form of the deleted chat

Route: "/api/message/<int:message_id>/" method=DELETE
Takes in message_id and deletes message
Returns the serialize form of the deleted message

Websocket: Connect to websocket with "ws://34.85.181.121/api/chat/"
Listen for: 'connect'
Sends the string "connected!" to event listening for "connection_succeeded"

Listen for: 'join'
Takes in a json with fields "user1_id" and "user2_id" which tells us which
chat is being joined. Also puts the user in a room corresponding to the chat id
Sends a json containing a list of messages in the chat between the two users
to the event listening for 'past_history' and to the room of the chat id

Listen for: 'private_message'
Takes in a json containing the fields 'sender_id', 'receiver_id', and 'msg'
Creates message and adds it to the chat.
Sends the serialized message to the event listening for 'private_message'
and to the room corresponding to the chat id.

Listen for: 'new_chat'
Takes in a json with fields "sender_id" and "receiver_id" and creates a new chat object
corresponding to these users. 
Sends the serialized chat to the event listening for 'chat_created'

First create chat, then join, then you can send private messages
